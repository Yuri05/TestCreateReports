name: Test Cache

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  WORKING_DIR: 'D:/0'
  GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

jobs:
  read_inputs:
    runs-on: ubuntu-latest
    outputs:
      tools_table: ${{ steps.tools_table.outputs.tools-table }}
      pk_sim_version: ${{ steps.tools_table.outputs.pk-sim }}
      qualification_framework_version: ${{ steps.tools_table.outputs.qualification-framework }}
      models_table: ${{ steps.models_table.outputs.table }}
      models: ${{ steps.models.outputs.data }}
      first_model_repo: ${{ steps.first_model.outputs.first_repo }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - id: tools_table
      name: Get tools table
      uses: Open-Systems-Pharmacology/Workflows/.github/actions/get-tools-versions@main
      with:
        tools-path: tools.csv

    - id: install-r
      name: Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: 'latest'
        use-public-rspm: true
    
    - name: Read and export models as json
      run: |
        Rscript -e 'install.packages("jsonlite")'
        Rscript -e '
          modelsData <- read.csv("models.csv", check.names = FALSE, stringsAsFactors = FALSE,
                                 colClasses = c("logical", rep("character", 6)))
          filtered <- modelsData[modelsData$Execute, ]
          cat(jsonlite::toJSON(filtered, dataframe = "rows"))
        ' > models.json
      shell: bash
    
    - name: Output models data for table conversion
      id: models_data
      run: echo "json=$(cat models.json)" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Markdown table for models
      uses: buildingcash/json-to-markdown-table-action@v1
      id: models_table
      with:
        json: "${{ steps.models_data.outputs.json }}"
    
    - name: Set models data as output for matrix run strategy
      id: models
      run: echo "data={\"include\":$(cat models.json)}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Determine first model repo (for single cache save authority)
      id: first_model
      run: |
        # Extract first "Repository name" from the JSON
        REPO=$(jq -r '.[0]."Repository name"' models.json)
        echo "First repo: $REPO"
        echo "first_repo=$REPO" >> $GITHUB_OUTPUT

  evaluation:
    needs: read_inputs
    strategy:
      matrix: ${{ fromJSON(needs.read_inputs.outputs.models) }}
      fail-fast: false
    runs-on: windows-latest
    env:
      R_LIBS_USER: ${{ github.workspace }}/RLibrary
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Compute tools.csv hash
      id: compute-tools-hash
      shell: bash
      run: echo "TOOLS_CSV_HASH=${{ hashFiles('tools.csv') }}" >> $GITHUB_ENV

    - name: Debug pre-restore
      run: |
        echo "Branch: $GITHUB_REF_NAME"
        echo "Commit: $GITHUB_SHA"
        echo "TOOLS_CSV_HASH (env): $TOOLS_CSV_HASH"
        echo "Intended cache key: ${{ runner.os }}-ospsuite-$TOOLS_CSV_HASH"
        echo "First model repo allowed to save: ${{ needs.read_inputs.outputs.first_model_repo }}"
        echo "This matrix repo: ${{ matrix['Repository name'] }}"
      shell: bash

    - name: Restore setup cache
      id: cache-setup
      uses: actions/cache/restore@v4
      with:
        key: ${{ runner.os }}-ospsuite-${{ env.TOOLS_CSV_HASH }}
        path: |
          ${{ env.R_LIBS_USER }}
          ${{ github.workspace }}/PK-Sim
          ${{ github.workspace }}/QualificationRunner

    - id: get-tools-versions
      name: Get tools versions (for R setup on cached runs)
      uses: Open-Systems-Pharmacology/Workflows/.github/actions/get-tools-versions@main
      with:
        tools-path: tools.csv

    - name: Setup R (cached run)
      if: steps.cache-setup.outputs.cache-hit == 'true'
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '${{ steps.get-tools-versions.outputs.r }}'
        use-public-rspm: true

    - name: Setup Pandoc (cached run)
      if: steps.cache-setup.outputs.cache-hit == 'true'
      uses: r-lib/actions/setup-pandoc@v2

    - name: Install chromehtml2pdf (cached run)
      if: steps.cache-setup.outputs.cache-hit == 'true'
      run: npm install -g chromehtml2pdf
      shell: bash

    - id: qualification-environment
      name: Setup Qualification Environment
      if: steps.cache-setup.outputs.cache-hit != 'true'
      uses: Open-Systems-Pharmacology/Workflows/.github/actions/setup-qualification-environment@main
      with:
        tools-path: tools.csv

    - name: Downgrade ggplot2 to 3.5.2
      if: steps.cache-setup.outputs.cache-hit != 'true'
      run: |
        Rscript -e 'remove.packages("ggplot2")'
        Rscript -e 'remotes::install_version("ggplot2", version = "3.5.2", repos = "https://cran.r-project.org")'
      shell: bash

    - name: Debug cached paths before save
      if: steps.cache-setup.outputs.cache-hit != 'true'
      run: |
        echo "Listing R library root: $R_LIBS_USER"
        if [ -d "$R_LIBS_USER" ]; then
          ls -l "$R_LIBS_USER" | head -n 50
        else
          echo "R library directory missing"
        fi
        echo "PK-Sim dir:"
        ls -l PK-Sim || echo "PK-Sim missing"
        echo "QualificationRunner dir:"
        ls -l QualificationRunner || echo "QualificationRunner missing"
      shell: bash

    - name: Determine if cache contents are non-empty
      if: steps.cache-setup.outputs.cache-hit != 'true'
      id: check-cache-contents
      shell: bash
      run: |
        fail=0
        check_nonempty () {
          local p="$1"
          if [ ! -d "$p" ]; then
            echo "::warning::Directory $p does not exist"
            fail=1
          else
            if [ -z "$(ls -A "$p" 2>/dev/null)" ]; then
              echo "::warning::Directory $p is empty"
              fail=1
            fi
          fi
        }
        check_nonempty "$R_LIBS_USER"
        check_nonempty "PK-Sim"
        check_nonempty "QualificationRunner"
        if [ $fail -eq 1 ]; then
          echo "SKIP_SAVE=1" >> $GITHUB_ENV
        fi

    - name: Save setup cache
      # Only one matrix job saves (the one matching first_model_repo) and only if directories non-empty
      if: |
        steps.cache-setup.outputs.cache-hit != 'true' &&
        env.SKIP_SAVE != '1' &&
        matrix['Repository name'] == needs.read_inputs.outputs.first_model_repo
      uses: actions/cache/save@v4
      with:
        key: ${{ runner.os }}-ospsuite-${{ env.TOOLS_CSV_HASH }}
        path: |
          ${{ env.R_LIBS_USER }}
          ${{ github.workspace }}/PK-Sim
          ${{ github.workspace }}/QualificationRunner

